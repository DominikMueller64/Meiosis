// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_Meiosis_RCPPEXPORTS_H_GEN_
#define RCPP_Meiosis_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace Meiosis {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("Meiosis", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("Meiosis", "Meiosis_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in Meiosis");
            }
        }
    }

    inline double calc_Lstar(double L, int m, double p, double epsilon) {
        typedef SEXP(*Ptr_calc_Lstar)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_calc_Lstar p_calc_Lstar = NULL;
        if (p_calc_Lstar == NULL) {
            validateSignature("double(*calc_Lstar)(double,int,double,double)");
            p_calc_Lstar = (Ptr_calc_Lstar)R_GetCCallable("Meiosis", "Meiosis_calc_Lstar");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_calc_Lstar(Rcpp::wrap(L), Rcpp::wrap(m), Rcpp::wrap(p), Rcpp::wrap(epsilon));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<double >(rcpp_result_gen);
    }

    inline std::vector<double> crossover(const double L, const int m, const double p, const bool obligate_chiasma, const double Lstar) {
        typedef SEXP(*Ptr_crossover)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_crossover p_crossover = NULL;
        if (p_crossover == NULL) {
            validateSignature("std::vector<double>(*crossover)(const double,const int,const double,const bool,const double)");
            p_crossover = (Ptr_crossover)R_GetCCallable("Meiosis", "Meiosis_crossover");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_crossover(Rcpp::wrap(L), Rcpp::wrap(m), Rcpp::wrap(p), Rcpp::wrap(obligate_chiasma), Rcpp::wrap(Lstar));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<std::vector<double> >(rcpp_result_gen);
    }

    inline Rcpp::List meiosis_xodat(const Rcpp::IntegerVector& patalle, const Rcpp::NumericVector& patloc, const Rcpp::IntegerVector& matalle, const Rcpp::NumericVector& matloc, const Rcpp::NumericVector& xlocations) {
        typedef SEXP(*Ptr_meiosis_xodat)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_meiosis_xodat p_meiosis_xodat = NULL;
        if (p_meiosis_xodat == NULL) {
            validateSignature("Rcpp::List(*meiosis_xodat)(const Rcpp::IntegerVector&,const Rcpp::NumericVector&,const Rcpp::IntegerVector&,const Rcpp::NumericVector&,const Rcpp::NumericVector&)");
            p_meiosis_xodat = (Ptr_meiosis_xodat)R_GetCCallable("Meiosis", "Meiosis_meiosis_xodat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_meiosis_xodat(Rcpp::wrap(patalle), Rcpp::wrap(patloc), Rcpp::wrap(matalle), Rcpp::wrap(matloc), Rcpp::wrap(xlocations));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<Rcpp::List >(rcpp_result_gen);
    }

}

#endif // RCPP_Meiosis_RCPPEXPORTS_H_GEN_
